{"ast":null,"code":"export const getElapsedTime = createAt => {\n  const currentDate = new Date();\n  const createdDate = new Date(createAt);\n  const elapsedTimeInMinutes = Math.floor((currentDate - createdDate) / (1000 * 60));\n  if (elapsedTimeInMinutes < 2) {\n    return \"1 minute ago\";\n  } else if (elapsedTimeInMinutes <= 59) {\n    return `${elapsedTimeInMinutes} minutes ago`;\n  }\n  const elapsedTimeInHours = Math.floor(elapsedTimeInMinutes / 60);\n  if (elapsedTimeInHours === 1) {\n    return \"1 hour ago\";\n  } else if (elapsedTimeInHours <= 23) {\n    return `${elapsedTimeInHours} hours ago`;\n  }\n  const elapsedTimeInDays = Math.floor(elapsedTimeInHours / 24);\n  if (elapsedTimeInDays === 1) {\n    return \"1 day ago\";\n  } else if (elapsedTimeInDays <= 30) {\n    return `${elapsedTimeInDays} days ago`;\n  }\n  const elapsedTimeInMonths = Math.floor(elapsedTimeInDays / 30);\n  if (elapsedTimeInMonths === 1) {\n    return \"1 month ago\";\n  } else if (elapsedTimeInMonths <= 11) {\n    return `${elapsedTimeInMonths} months ago`;\n  }\n  const elapsedTimeInYears = Math.floor(elapsedTimeInMonths / 12);\n  if (elapsedTimeInYears === 1) {\n    return \"1 year ago\";\n  } else {\n    return `${elapsedTimeInYears} years ago`;\n  }\n};\nexport function formatDate(isoDateString) {\n  const date = new Date(isoDateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n  return `${year}. ${month}. ${day}`;\n}","map":{"version":3,"names":["getElapsedTime","createAt","currentDate","Date","createdDate","elapsedTimeInMinutes","Math","floor","elapsedTimeInHours","elapsedTimeInDays","elapsedTimeInMonths","elapsedTimeInYears","formatDate","isoDateString","date","year","getFullYear","month","String","getMonth","padStart","day","getDate"],"sources":["/Users/boky/Desktop/codeit/98_weeklymission/4-Weekly-Mission/src/components/body/getElapsedTime.js"],"sourcesContent":["export const getElapsedTime = (createAt) => {\n  const currentDate = new Date();\n  const createdDate = new Date(createAt);\n  const elapsedTimeInMinutes = Math.floor(\n    (currentDate - createdDate) / (1000 * 60)\n  );\n\n  if (elapsedTimeInMinutes < 2) {\n    return \"1 minute ago\";\n  } else if (elapsedTimeInMinutes <= 59) {\n    return `${elapsedTimeInMinutes} minutes ago`;\n  }\n\n  const elapsedTimeInHours = Math.floor(elapsedTimeInMinutes / 60);\n  if (elapsedTimeInHours === 1) {\n    return \"1 hour ago\";\n  } else if (elapsedTimeInHours <= 23) {\n    return `${elapsedTimeInHours} hours ago`;\n  }\n\n  const elapsedTimeInDays = Math.floor(elapsedTimeInHours / 24);\n  if (elapsedTimeInDays === 1) {\n    return \"1 day ago\";\n  } else if (elapsedTimeInDays <= 30) {\n    return `${elapsedTimeInDays} days ago`;\n  }\n\n  const elapsedTimeInMonths = Math.floor(elapsedTimeInDays / 30);\n  if (elapsedTimeInMonths === 1) {\n    return \"1 month ago\";\n  } else if (elapsedTimeInMonths <= 11) {\n    return `${elapsedTimeInMonths} months ago`;\n  }\n\n  const elapsedTimeInYears = Math.floor(elapsedTimeInMonths / 12);\n  if (elapsedTimeInYears === 1) {\n    return \"1 year ago\";\n  } else {\n    return `${elapsedTimeInYears} years ago`;\n  }\n};\n\nexport function formatDate(isoDateString) {\n  const date = new Date(isoDateString);\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\n  const day = String(date.getDate()).padStart(2, \"0\");\n\n  return `${year}. ${month}. ${day}`;\n}\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,QAAQ,IAAK;EAC1C,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC9B,MAAMC,WAAW,GAAG,IAAID,IAAI,CAACF,QAAQ,CAAC;EACtC,MAAMI,oBAAoB,GAAGC,IAAI,CAACC,KAAK,CACrC,CAACL,WAAW,GAAGE,WAAW,KAAK,IAAI,GAAG,EAAE,CAC1C,CAAC;EAED,IAAIC,oBAAoB,GAAG,CAAC,EAAE;IAC5B,OAAO,cAAc;EACvB,CAAC,MAAM,IAAIA,oBAAoB,IAAI,EAAE,EAAE;IACrC,OAAQ,GAAEA,oBAAqB,cAAa;EAC9C;EAEA,MAAMG,kBAAkB,GAAGF,IAAI,CAACC,KAAK,CAACF,oBAAoB,GAAG,EAAE,CAAC;EAChE,IAAIG,kBAAkB,KAAK,CAAC,EAAE;IAC5B,OAAO,YAAY;EACrB,CAAC,MAAM,IAAIA,kBAAkB,IAAI,EAAE,EAAE;IACnC,OAAQ,GAAEA,kBAAmB,YAAW;EAC1C;EAEA,MAAMC,iBAAiB,GAAGH,IAAI,CAACC,KAAK,CAACC,kBAAkB,GAAG,EAAE,CAAC;EAC7D,IAAIC,iBAAiB,KAAK,CAAC,EAAE;IAC3B,OAAO,WAAW;EACpB,CAAC,MAAM,IAAIA,iBAAiB,IAAI,EAAE,EAAE;IAClC,OAAQ,GAAEA,iBAAkB,WAAU;EACxC;EAEA,MAAMC,mBAAmB,GAAGJ,IAAI,CAACC,KAAK,CAACE,iBAAiB,GAAG,EAAE,CAAC;EAC9D,IAAIC,mBAAmB,KAAK,CAAC,EAAE;IAC7B,OAAO,aAAa;EACtB,CAAC,MAAM,IAAIA,mBAAmB,IAAI,EAAE,EAAE;IACpC,OAAQ,GAAEA,mBAAoB,aAAY;EAC5C;EAEA,MAAMC,kBAAkB,GAAGL,IAAI,CAACC,KAAK,CAACG,mBAAmB,GAAG,EAAE,CAAC;EAC/D,IAAIC,kBAAkB,KAAK,CAAC,EAAE;IAC5B,OAAO,YAAY;EACrB,CAAC,MAAM;IACL,OAAQ,GAAEA,kBAAmB,YAAW;EAC1C;AACF,CAAC;AAED,OAAO,SAASC,UAAUA,CAACC,aAAa,EAAE;EACxC,MAAMC,IAAI,GAAG,IAAIX,IAAI,CAACU,aAAa,CAAC;EACpC,MAAME,IAAI,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D,MAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEnD,OAAQ,GAAEL,IAAK,KAAIE,KAAM,KAAII,GAAI,EAAC;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}